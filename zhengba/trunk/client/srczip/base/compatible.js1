(function(global){
    //兼容2.x的写法
    // ccs.TouchEventType = {began: 0, moved: 1, ended: 2, canceled: 3};

    // cc.Node.prototype.find = cc.Node.prototype.finds;

    // cc.Node.prototype.findsByPath = function(v){
    //     return this.finds(v,true);
    // };

    // X.window = {
    //     scene : function(){
    //         return cc.director.getRunningScene();
    //     }
    // };
    X.bUi.prototype.setCache = function(val,howlong){

    };

    X.bUi.prototype.prepare = function(callback){
        callback && callback();
    };
    // X.bUi.prototype.hide = X.bUi.prototype.remove;
    //X.defaultViewConf.action = true;
    X.getMaxZOrder = X.uiMana.getMaxZOrder;

    X.keysOfObject = function(object){
        if(Object.keys){
            return object==null?[]:Object.keys(object);
        }else{
            var keys = [];
            if (object){
                for(var key in object){
                    keys.push(key);
                }
            }
            return keys;
        }
    };

    C.color = cc.color;

    X.hideAllFrame = function(conf){
        for(var k in G.openingFrame){
            if( conf && conf.except && (','+conf.except+',').indexOf(','+ k +',') != -1 ){
                continue;
            }else if(conf && conf.singleGroup && G.frame[k].singleGroup!=conf.singleGroup){
                continue;
            }
            G.frame[k].hide();
        }
    };

})();


(function(global){
    function Animation(){

    }
    var getAnimFrames = function(name, startIndex, endIndex) {
        var frames = [],
            i = 0,
            startIndex = startIndex || 0;
        var reversed = false, cached = false;

        if(endIndex == null){
            //没有限定范围只能从cache中取
            endIndex = 99999;
            cached = true;
        }

        if(startIndex > endIndex){
            var tmp = endIndex;
            endIndex = startIndex;
            startIndex = tmp;
            reversed = true;
        }
        var length = (endIndex - startIndex) + 1;

        do {
            var frameName = name.replace('%d', startIndex + i),
                frame = cc.spriteFrameCache.getSpriteFrame(frameName, cached);

            if(frame) {
                frames.push(frame);
            }else {
                break;
            }

        } while (++i < length);

        if(reversed){
            frames.reverse();
        }

        return frames;
    };

    cc.mixin(Animation.prototype, {
        _getActionList: function(){
            this.__actions = this.__actions || [];
            return this.__actions;
        },
        _getAction: function(){
            this.__spawn = this.__spawn || [];
            if(this._getActionList().length > 0){
                this.spawn();
            }
            if(this.__spawn.length > 1){
                return cc.Spawn.create.apply(cc.Spawn, this.__spawn);
            }else if(this.__spawn.length == 1){
                return this.__spawn[0];
            }
        },
        _addAction: function(actionCls, args, easing, rate){
            var actions;

            if(actionCls instanceof Animation){
                actionCls = actionCls._getAction().clone();
            }

            if(actionCls instanceof cc.Action){
                rate = easing;
                easing = args;
                actions = [actionCls];
            }else{
                for(var i = args.length - 1; i >= 0; i--){
                    if(args[i] !== undefined){
                        break;
                    }
                }
                args.length = i + 1;
                actions = [actionCls.create.apply(actionCls, args)];
            }
            if(easing){
                //rate = rate || 2;
                var easingArgs = [].slice.call(arguments, 3);
                for(var i = easingArgs.length - 1; i >= 0; i--){
                    if(easingArgs[i] !== undefined){
                        //easingArgs.length = i + 1;
                        break;
                    }
                }
                easingArgs.length = i + 1;
                //cc.log(i, easingArgs);
                actions[0] = easing.create.apply(easing, [actions[0]].concat(easingArgs));
            }
            var actionSeq = this._getActionList();
            actionSeq.push.apply(actionSeq, actions);
            return this;
        },
        delay: function(time){
            return this._addAction(cc.DelayTime, [time]);
        },
        /**
         *  times - repeat time
         *  fromWhere - default 0, repeat all sequences before
         */
        repeat: function(times, fromWhere){
            times = times || 9999999;
            fromWhere = fromWhere || 0;
            var actionSeq = this._getActionList();
            if(actionSeq.length > 0){
                var action = cc.Sequence.create.apply(cc.Sequence, actionSeq.slice(-fromWhere));
                action = cc.Repeat.create(action, times);
                if(fromWhere == 0) actionSeq.length = 0;
                else actionSeq.length = actionSeq.length - fromWhere;
                actionSeq.push(action);
            }
            return this;
        },
        reverse: function(){
            var actionSeq = this._getActionList();
            if(actionSeq.length > 0){
                var action = actionSeq[actionSeq.length - 1];
                actionSeq.push(action.reverse());
            }
            return this;
        },
        reverseAll: function(){
            var actionSeq = this._getActionList();
            if(actionSeq.length > 0){
                var action = cc.Sequence.create.apply(cc.Sequence, actionSeq);
                actionSeq.push(action.reverse());
            }
            return this;
        },
        then: function(callFun){
            var callback = cc.CallFunc.create(callFun, this);
            this._getActionList().push(callback);
            return this;
        },
        bezierBy: function(dur, conf, easing, rate){
            return this._addAction(cc.BezierBy, [dur, conf], easing, rate);
        },
        bezierTo: function(dur, conf, easing, rate){
            return this._addAction(cc.BezierTo, [dur, conf], easing, rate);
        },
        blink: function(dur, blinks, easing, rate){
            return this._addAction(cc.Blink, [dur, blinks], easing, rate);
        },
        fadeIn: function(dur, easing, rate){
            return this._addAction(cc.FadeIn, [dur], easing, rate);
        },
        fadeOut: function(dur, easing, rate){
            return this._addAction(cc.FadeOut, [dur], easing, rate);
        },
        fadeTo: function(dur, opacity, easing, rate){
            return this._addAction(cc.FadeTo, [dur, opacity], easing, rate);
        },
        jumpBy: function(dur, pos, height, times, easing, rate){
            return this._addAction(cc.JumpBy, [dur, pos, height, times || 1], easing, rate);
        },
        jumpTo: function(dur, pos, height, times, easing, rate){
            return this._addAction(cc.JumpTo, [dur, pos, height, times || 1], easing, rate);
        },
        moveBy: function(dur, pos, easing, rate){
            return this._addAction(cc.MoveBy, [dur, pos], easing, rate);
        },
        moveTo: function(dur, pos, easing, rate){
            return this._addAction(cc.MoveTo, [dur, pos], easing, rate);
        },
        rotateBy: function(dur, deltaX, deltaY, easing, rate){
            return this._addAction(cc.RotateBy, [dur, deltaX, deltaY], easing, rate);
        },
        rotateTo: function(dur, deltaX, deltaY, easing, rate){
            return this._addAction(cc.RotateTo, [dur, deltaX, deltaY], easing, rate);
        },
        scaleBy: function(dur, sx, sy, easing, rate){
            return this._addAction(cc.ScaleBy, [dur, sx, sy], easing, rate);
        },
        scaleTo: function(dur, sx, sy, easing, rate){
            return this._addAction(cc.ScaleTo, [dur, sx, sy], easing, rate);
        },
        skewBy: function(dur, sx, sy, easing, rate){
            return this._addAction(cc.SkewBy, [dur, sx, sy], easing, rate);
        },
        skewTo: function(dur, sx, sy, easing, rate){
            return this._addAction(cc.SkewTo, [dur, sx, sy], easing, rate);
        },
        tintBy: function(dur, deltaR, deltaG, deltaB, easing, rate){
            return this._addAction(cc.TintBy, [dur, deltaR, deltaG, deltaB], easing, rate);
        },
        tintTo: function(dur, deltaR, deltaG, deltaB, easing, rate){
            return this._addAction(cc.TintTo, [dur, deltaR, deltaG, deltaB], easing, rate);
        },
        /**
         sprite.animate(0.2, 'a.png', 'b.png', 'c.png');
         sprite.animate(0.2, 'abc_%d.png');
         sprite.animate(0.2, 'abc_%d.png', startIndex, endIndex);
         */
        animate: function(dur /* frames */){
            var frames = [].slice.call(arguments, 1);

            if(/%d/.test(frames[0])){
                frames = getAnimFrames.apply(null, frames);
            }else{
                frames = frames.map(function(frameName){
                    return cc.spriteFrameCache.getSpriteFrame(frameName);
                });
            }

            var animation = cc.Animation.create(frames, dur/frames.length);
            this._getActionList().push(cc.Animate.create(animation));
            return this;
        },
        spawn: function(){
            this.__spawn = this.__spawn || [];
            var actionSeq = this._getActionList();
            if(actionSeq.length > 0){
                var action = actionSeq[0];
                if(actionSeq.length > 1){
                    action = cc.Sequence.create.apply(cc.Sequence, actionSeq);
                }
                this.__spawn.push(action);
                actionSeq.length = 0;
            }
            return this;
        }
    });

    Animation.prototype.play = Animation.prototype.addAction;

    cc.mixin(cc.Node.prototype, new Animation);

    cc.AnimationFragement = Animation;
    cc.AnimationFragement.create = function(){
        return new cc.AnimationFragement();
    };

    cc.Node.prototype.run = function(){
        var action = this._getAction();
        if(action){
            this.runAction(action);
            this._getActionList().length = 0;
            this.__spawn.length = 0;
            return action;
        }
        return null;
    };

})(this);